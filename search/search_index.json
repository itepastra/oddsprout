{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Oddsprout","text":"<p>Oddsprout is a configurable CLI tool and a Python library for generating random JSONs with no schemas involved. I developed this tool out of necessity to test a JSON parser but all solutions I found online involved generating data based on templates.</p>"},{"location":"#installation","title":"Installation","text":"<p>If you only intend to use it as a CLI tool: <pre><code>pipx install oddsprout\n</code></pre></p> <p>Otherwise, install the library from PyPI: <pre><code>pip install oddsprout\n</code></pre> Or from source: <pre><code>pip install git+https://github.com/trag1c/oddsprout.git\n</code></pre></p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome!</p> <p>Please open an issue before submitting a pull request (unless it's a minor change like fixing a typo).</p> <p>To get started:</p> <ol> <li>Clone your fork of the project.</li> <li> <p>Set up the project with just (make sure you have poetry installed):     <pre><code>just install\n</code></pre></p> <p>Note</p> <p>If you don't want to install <code>just</code>, simply look up the recipes in the project's <code>justfile</code>.</p> </li> <li> <p>After you're done, use the following <code>just</code> recipes to check your changes: <pre><code>just test      # runs pytest and mypy\njust lint      # runs the ruff linter and formatter in check mode\njust format    # runs the ruff formatter and isort\njust coverage  # checks UT and docstring coverage\n</code></pre></p> </li> </ol>"},{"location":"api_reference/","title":"API Reference","text":""},{"location":"api_reference/#config","title":"<code>Config</code>","text":"<pre><code>Charset = Literal[\"ascii\", \"alpha\", \"alnum\", \"digits\"]\nBaseKind = Literal[\"any\", \"array\", \"object\"]\n\n@dataclass(frozen=True)\nclass Config:\n    # passing an empty tuple will raise an OddsproutValueError\n    types: tuple[str, ...] = (\n        \"int\",\n        \"float\",\n        \"string\",\n        \"boolean\",\n        \"null\",\n        \"array\",\n        \"object\",\n    )\n    base_size: tuple[int, int] = (0, 100)\n    string_size: tuple[int, int] = (0, 50)\n    collection_size: tuple[int, int] = (0, 100)\n    charset: Charset = \"ascii\"\n    base: BaseKind = \"any\"\n\n    @classmethod\n    def from_file(cls, path: PathLike[str] | str) -&gt; Config:\n        ...\n</code></pre>"},{"location":"api_reference/#jsongenerator","title":"<code>JSONGenerator</code>","text":"<pre><code>type JSONObject = dict[str, JSONValue]\ntype JSONArray = list[JSONValue]\ntype JSONValue = JSONObject | JSONArray | str | int | float | bool | None\n\nclass JSONGenerator:\n    def __init__(self, config: Config | None = None) -&gt; None:\n        ...\n\n    @property\n    def config(self) -&gt; Config:\n        ...\n\n    def generate_value(self) -&gt; JSONValue:\n        ...\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>Oddsprout can be configured via a TOML file (for the CLI) and via a <code>Config</code> object (for the Python library).</p>"},{"location":"configuration/#default-config","title":"Default config","text":"<p>If left unspecified, the default oddsprout config is equivalent to:</p> CLIAPI <pre><code>[bounds]\nbase-max = 100\nstring-max = 50\ncollection-max = 100\n\n[types]\nbase = \"any\"\ncharset = \"ascii\"\ninclude = [\"int\", \"float\", \"string\", \"boolean\", \"null\", \"array\", \"object\"]\n</code></pre> <pre><code>import oddsprout\n\noddsprout.Config(\n    base_size=(0, 100),\n    string_size=(0, 50),\n    collection_size=(0, 100),\n    base=\"any\",\n    charset=\"ascii\",\n    types=[\"int\", \"float\", \"string\", \"boolean\", \"null\", \"array\", \"object\"]\n)\n</code></pre>"},{"location":"configuration/#settings","title":"Settings","text":""},{"location":"configuration/#base","title":"<code>base</code>","text":"<p>The type to use for the JSON's root. Valid options are <code>\"any\"</code>, <code>\"array\"</code>, and <code>\"object\"</code>. Choosing <code>\"any\"</code> will randomly select the base type. </p> <p>Defaults to <code>\"any\"</code>.</p>"},{"location":"configuration/#charset","title":"<code>charset</code>","text":"<p>The set of characters to use for string generation. Valid options are:</p> <ul> <li><code>\"ascii\"</code>: all characters from <code>0x00</code> to <code>0x7F</code></li> <li><code>\"alpha\"</code>: <code>A\u2013Z</code> and <code>a\u2013z</code></li> <li><code>\"alnum\"</code>: <code>\"alpha\"</code> + <code>0\u20139</code></li> <li><code>\"digits\"</code>: <code>0\u20139</code></li> </ul> <p>Defaults to <code>\"ascii\"</code>.</p>"},{"location":"configuration/#bounds","title":"Bounds","text":"<p>Three types of bounds can be specified:</p> <ul> <li>base bounds dictate the size of the root collection</li> <li>string bounds dictate the length of generated strings</li> <li>collection bounds dictate the size of nested collections</li> </ul> <p>In the Python API, they are specified through the <code>base_size</code>, <code>string_size</code>, and <code>collection_size</code> parameters, all of which are of type <code>tuple[int, int]</code> (specifying the minimum and maximum size).</p> <p>In the CLI TOML configuration, the bounds can be specified through <code>base</code>, <code>string</code>, and <code>collection</code> settings, all of which require an array of 2 integers. Alternatively, by suffixing the setting with <code>-max</code>, you can only set the maximum value, making e.g. <code>string-max = 30</code> equivalent to <code>string = [0, 30]</code>.</p> Range settings<code>-max</code> settings <pre><code>base = [0, 20]\nstring = [0, 30]\ncollection = [0, 10]\n</code></pre> <pre><code>base-max = 20\nstring-max = 30\ncollection-max = 10\n</code></pre> <p>Warning</p> <p>Oddsprout heavily relies on recursion to generate JSONs, which means it may fail for more extreme <code>bounds</code> configurations. For the Python API, you can attempt to counter this by increasing the recursion limit.</p>"},{"location":"configuration/#types","title":"Types","text":"<p>The data types to include during generation. Defaults to using all types. In the Python API, they're specified via the <code>types</code> parameter, which is a <code>tuple[str, ...]</code>. In the CLI, they're specified via the <code>include</code> or <code>exclude</code> setting, both of which are arrays of type names. Duplicate types are ignored.</p> <p>Example: Only generate arrays of numbers, booleans, and nested arrays:</p> Python APITOML (using <code>include</code>)TOML (using <code>exclude</code>) <pre><code>import oddsprout\n\noddsprout.JSONGenerator(\n    oddsprout.Config(base=\"array\", types=(\"number\", \"boolean\", \"array\"))\n)\n</code></pre> <pre><code>[types]\nbase = \"array\"\ninclude = [\"number\", \"boolean\", \"array\"]\n</code></pre> <pre><code>[types]\nbase = \"array\"\nexclude = [\"string\", \"object\", \"null\"]\n</code></pre> <p>Tip</p> <p>The <code>\"number\"</code> type is an alias for including <code>\"int\"</code> and <code>\"float\"</code> at once. The above example would behave the same way if <code>Config(..., types=(\"int\", \"float\", \"boolean\", \"array\"))</code> or <code>include = [\"int\", \"float\", \"boolean\", \"array\"]</code> were supplied.</p>"},{"location":"usage/","title":"Usage","text":"<p>Oddsprout can be used both as a CLI application and as a Python library.</p>"},{"location":"usage/#cli","title":"CLI","text":"<p>Oddsprout can be invoked by the <code>oddsprout</code> command (if that doesn't work, try invoking it via Python, i.e. <code>python -m oddsprout</code> if you installed with <code>pip</code>). <pre><code>$ oddsprout --help\nusage: oddsprout [-h] [--config CONFIG]\n\noptional arguments:\n  -h, --help       show this help message and exit\n  --config CONFIG  path to configuration file\n</code></pre> If no arguments are provided, oddsprout will generate a JSON using the default config and print it to standard output: <pre><code>$ oddsprout\n{\n  \"&gt;@y3{QR\\u000eBU\\t\\u0006&lt;$\\f\\u0001\\u0014R\\u000bSq\\u0000i\": \"I/h2\\u000fjxCr\\u0006\\u0013sk\\rRA8`\\u0015z}\\u0018{l\\u001aJ\\u001c{4T|9)\\fP]\",\n  \"C\\u000f\\u0010q1-d'\\u00064cRE`\\b\\u0005\\u0019},x&gt;2\\\"aL)\\u001e\\u007fD@M\\u0012H\\\"Tp\": 723670.4717504024,\n  \"\\u001b\\u0001x@#\": -809897.8178375069,\n\n  *snip*\n\n  \"j\\u0005\\u0017\\u0015u\\u0017\\u007f\\u0013&lt;w\\u0017\\u0006!\\rRHzFP)_;\": -730165.940092089,\n  \"IPpp|\": -20909.71435106476,\n  \"{8\\u0019La\\u001f;\\\\\\u0010_D53%e\\rdO9\\u0000\\u0010'N/'\\u000f6\\u001ft\\u0019Hoq0V$3y$\": null\n}\n</code></pre> A config file can be provided with the <code>--config</code> flag: <pre><code>$ cat oddsprout.toml\n[bounds]\nbase-max = 10\n\n[types]\nbase = \"array\"\ninclude = [\"number\", \"boolean\"]\n$ oddsprout --config oddsprout.toml\n[\n  563672.3124703288,\n  false,\n  902865.0353718256,\n  -64548.64624481776,\n  446222.7337318931,\n  true,\n  -280712.10006229405,\n  true,\n  -856591\n]\n</code></pre> See the Configuration section for details.</p> <p>To save the JSON to a file, simply redirect standard output to the destination: <pre><code>$ oddsprout --config oddsprout.toml &gt; random.json\n</code></pre></p>"},{"location":"usage/#api","title":"API","text":"<p>The Python API comprises of the <code>JSONGenerator</code> and <code>Config</code> classes, the former being reliant on the latter. Passing no arguments to <code>JSONGenerator</code> will make it use the default config:</p> <pre><code>import oddsprout\n\ngen = oddsprout.JSONGenerator()\nprint(gen.generate_value())\n# {\n#   \"2.'gu|l\\fH \\u007f.B\\u0017'gcd\\u001a@\\u000b\\u0000\": \"}\\\"sNN4[\",\n#   \"xu{g\\u0003Y*\\u0017\\t\\u0000;z%\\u001eE05\\u00033+lR2@a#jrt\\u007f-(`\\u0014\\u0006tEg/\\\\&amp;\": null,\n#   \"xnm(vO\\u0014\\bCD\\u0000SYc\": null,\n#\n#   *snip*\n#\n#   \"8o&amp;\\bmIcsu\\u0007\\u007fBz_Njo\\u0011w&lt;@\": -483862,\n#   \"Vf\\r\\u0014hSzL\\\"\\u0002\\u000f\\u00141~^\\f]\\u000beIL\\u0002\\u0007\\u00139^ZIK`8)!8j\\u0006c\\u0018r_\\u0015M\\u0015\": \"\\u001bc\\\\a\\u000e}v`Ju\\r\\u000enFk\\u0007\\u0001Z5S[&amp;qt\\b)\\u0003A(OP}d|_%/H{a\\u001c\\u0007\"\n# }\n</code></pre> <p>Info</p> <p><code>JSONGenerator.generate_value</code> returns a Python <code>list</code> or <code>dict</code>, not a JSON string like the CLI.</p> <p>The only argument <code>JSONGenerator</code> accepts is a <code>Config</code> object: <pre><code>import oddsprout\n\ngen = oddsprout.JSONGenerator(\n  oddsprout.Config(base_size=(0, 10), base=\"array\", types=(\"number\", \"boolean\"))\n)\n\nprint(gen.generate_value())\n# [51560, -536427.4840101383, False, False, 382182, -510471]\n</code></pre></p> <p>See the Configuration section and the API reference for details on configuring oddsprout.</p>"}]}